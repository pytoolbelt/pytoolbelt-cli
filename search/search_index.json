{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#sharing-python-tooling-within-your-organization-the-easy-way","title":"Sharing python tooling within your organization, the easy way.","text":""},{"location":"#what-is-pytoolbelt","title":"What is Pytoolbelt?","text":"<p>Pytoolbelt is a CLI, intended to simplify creating and sharing python tools within your organization. It treats a standard git repo as a <code>toolbelt</code>, which is a mono repo with all of your python tools you want to share within your organization. It also allows your team to define one or more python environments (venv) that can be re-used for multiple tools,  Tools are installed as a zipapp from source, which can be run globally from your terminal. </p>"},{"location":"#why-pytoolbelt","title":"Why Pytoolbelt?","text":"<p>Python is a wonderful language for writing scripts and small tools, but sharing them within your organization can be a pain. Navigating the python packaging ecosystem can be daunting, and creating a package for a simple script can be overkill. Not to mention that if you want to be able to <code>pip install</code> your tool, you need either to publish it to PyPi  or to have a private package server (aka artifact repo), which is not always desirable or simply too much work.</p> <p>Pytoolbelt aims to simplify this process by treating a git repo as a <code>toolbelt</code>. Installation is a simple as cloning the repo and running  <code>pytoolbelt tool install --name &lt;toolname&gt;</code>, and the tool is installed as a zipapp, which can be run globally from your terminal.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>Check out the full documentation at github pages here</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>pytoolbelt can be installed via pip (venv creation recommended):</p> <pre><code>pip install pytoolbelt-cli\n</code></pre> <p><code>pytoolbelt</code> is also intended to be installed globally if desired. If that is the case, It is recommended to be installed via <code>pipx</code></p> <pre><code>pipx install pytoolbelt-cli\n</code></pre> <p>Pipx is a tool that can be considered a \"homebrew\" for tools written in python. More information on <code>pipx</code> can be found here</p>"},{"location":"#initialize-pytoolbelt","title":"Initialize pytoolbelt","text":"<p>To initialize a new pytoolbelt project and add the required directories to your <code>$PATH</code>, run the following command:</p> <pre><code>pytoolbelt init --path\n</code></pre> <p>this will add the <code>~/.pytoolbelt/tools</code> directory to your <code>$PATH</code> in your <code>.bashrc</code> or <code>.zshrc</code> file.</p>"},{"location":"#video-tutorials","title":"Video Tutorials","text":"<p>Head over to the pytoolbelt YouTube channel for video tutorials on how to use pytoolbelt: Pytoolbelt YouTube Channel</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the Apache License 2.0 - see the LICENSE file for details.</p>"},{"location":"commands/","title":"CLI","text":""},{"location":"commands/#cli-reference","title":"CLI Reference","text":""},{"location":"commands/#organization","title":"Organization","text":"<p>The <code>pytoolbelt</code> CLI organizes its commands in the following way:</p> <pre><code>pytoolbelt &lt;command&gt; &lt;subcommand&gt; &lt;options&gt;\n</code></pre> <p>Where <code>&lt;command&gt;</code> is a noun <code>&lt;subcommand&gt;</code> is a verb and <code>&lt;options&gt;</code> are the flags and arguments that the command accepts.</p> <p>example -&gt; Creating a new tool:</p> <pre><code>pytoolbelt tool new --name mytool\n</code></pre>"},{"location":"commands/#help","title":"Help","text":"<p>At any level of the command hierarchy, you can get help by running the command with the <code>--help</code> or <code>-h</code> flag. This will print out the help for the command and all of its subcommands.</p>"},{"location":"commands/#commands","title":"Commands","text":"<p>The following is a list of commands that <code>pytoolbelt</code> supports:</p>"},{"location":"commands/#toolbelt","title":"Toolbelt","text":"<p>The <code>toolbelt</code> command is used to manage the <code>toolbelt</code> repository. This includes creating a new <code>toolbelt</code>, or cloning an existing <code>toolbelt</code>.</p>"},{"location":"commands/#tool","title":"Tool","text":"<p>The <code>tool</code> command is used to manage the <code>tools</code> within a <code>toolbelt</code>. This includes creating a new <code>tool</code>, and installing a <code>tool</code>.</p>"},{"location":"commands/#ptvenv","title":"Ptvenv","text":"<p>The <code>ptvenv</code> command is used to manage the <code>ptvenv</code> within a <code>toolbelt</code>. This includes creating a new <code>ptvenv</code>, and installing a <code>ptvenv</code>.</p>"},{"location":"commands/#release","title":"Release","text":"<p>The <code>release</code> command is used to manage the <code>releases</code> within a <code>toolbelt</code>. This includes creating a new <code>release</code>.</p>"},{"location":"install_dirs/","title":"Initialize Pytoolbelt","text":""},{"location":"install_dirs/#pytoolbelt-directories","title":"Pytoolbelt Directories","text":"<p><code>pytoolbelt</code> allows you to manage your python tools and scripts in a single repository, and share them with your team.  This repository is called a <code>toolbelt</code>. Pytoolbelt can manage many <code>toolbelts</code> on your system, and allows you to install and run tools from them. After running <code>pytoolbelt init</code>, you can add the <code>~/.pytoolbelt/tools</code> directory to your <code>$PATH</code> either by running <code>pytoolbelt init --path</code> or by manually adding it to your <code>.bashrc</code> or <code>.zshrc</code> file.</p>"},{"location":"install_dirs/#pytoolbelt-directories_1","title":"Pytoolbelt Directories","text":"<p><code>pytoolbelt</code> requires the following directories to be present on your system:</p> <ul> <li><code>~/.pytoolbelt</code> - The root directory where all venvs and toolbelts are installed.</li> <li><code>~/.pytoolbelt/environments</code> - The directory where all venvs are installed.</li> <li><code>~/.pytoolbelt/tools</code> - The directory where all tools are installed.</li> <li><code>~/pytoolbelt/toolbelts</code> - The directory where all toolbelts are installed.</li> </ul>"},{"location":"install_dirs/#the-toolbeltsyml-file","title":"The toolbelts.yml file","text":"<p>The <code>toolbelts.yml</code> file is a configuration file that contains the list of all toolbelts that are installed on your system. It is located at <code>~/.pytoolbelt/toolbelts.yml</code>.</p>"},{"location":"ptvenv/","title":"ptvenv","text":""},{"location":"ptvenv/#what-is-a-ptvenv","title":"What is a ptvenv?","text":"<p>A <code>ptvenv</code> is simply a <code>yaml</code> file that has a minimal python environment definition. This environment will be built using <code>pytoolbelt</code>, which will put the resulting python environment in a consistent location which can be referenced when developing and installing your tools.  This allows multiple tools to share the same python environment, reducing the development overhead of having to manage an environment for each tool, as with more traditional python virtual environments.</p>"},{"location":"ptvenv/#creating-a-ptvenv","title":"Creating a ptvenv","text":"<p>To create a <code>ptvenv</code> from the toolbelt directory of your project, simply run the following command</p> <pre><code>pytoolbelt ptvenv new --name my_ptvenv\n</code></pre> <p>or globally, you can specify the toolbelt to use</p> <pre><code>pytoolbelt ptvenv new --toolbelt my-toolbelt --name my_ptvenv\n</code></pre>"},{"location":"ptvenv/#directory-structure","title":"Directory Structure","text":"<p>An example of what a <code>ptvenv</code> directory structure looks like is as follows:</p> <pre><code>ptvenv\n\u251c\u2500\u2500 myptvenv\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 myptvenv.yml   -- The ptvenv configuration file\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 README.md      -- A README file for the ptvenv\n</code></pre>"},{"location":"ptvenv/#example-definition","title":"Example Definition","text":"<pre><code>name: my_ptvenv\nversion: \"0.1.0\"\npython_version: \"3.10\"\nrequirements:\n    - pytoolbelt-toolkit==0.4.0\n    - pyyaml==6.0.1\n    - python-dotenv==1.0.0\n    - requests==2.32.3\n</code></pre> <p>Each key in the <code>yml</code> file has the following meaning</p> <ul> <li><code>name (string)</code> An arbitrary, but meaningful name for the <code>ptvenv</code></li> <li><code>version (string)</code> The semantic version for the <code>ptvenv</code> (must be quoted)</li> <li><code>python_version (string)</code> The version of python required to create the <code>ptvenv</code>. (must be quoted)</li> <li><code>requrements (list[string])</code> A list of requirements following the same syntax as accepted in a <code>requirements.txt</code> file.</li> </ul> <p>The requirements section is optional. If your tools do not require any additional dependencies to operate, then leave this list empty.</p>"},{"location":"ptvenv/#installing-a-ptvenv","title":"Installing a ptvenv","text":""},{"location":"ptvenv/#from-a-released-ptvenv","title":"From a released ptvenv","text":"<p>If a specific version of a <code>ptvenv</code> has been released in the repo, you can specify the version to install using the == syntax</p> <pre><code>pytoolbelt ptvenv install --name my_ptvenv==1.22.3\n</code></pre> <p>or otherwise if you want to install the latest version of a <code>ptvenv</code> you can simply run</p> <pre><code>pytoolbelt ptvenv install --name my_ptvenv\n</code></pre> <p>These command however both require that a ptvenv has been released in the toolbelt. If you just want to install whatever the state of the current config file is it is possible as described below.</p>"},{"location":"ptvenv/#from-ptvenv-definition","title":"From ptvenv definition","text":"<p>To build and install a <code>ptvenv</code> directly from the definition file, you can run the following command</p> <pre><code>pytoolbelt ptvenv install --name my_ptvenv --from-config\n</code></pre> <p>Or from any directory by specifying the toolbelt to find the definition in</p> <pre><code>pytoolbelt ptvenv install --toolbelt my-toolbelt --name my_ptvenv --from-config\n</code></pre>"},{"location":"ptvenv/#see-installed-ptvenvs","title":"See installed ptvenvs","text":"<p>To see a list of installed <code>ptvenvs</code> you can run the following command</p> <pre><code>pytoolbelt installed --ptvenv\n</code></pre> <p>This will display a table of installed <code>ptvenvs</code> and their versions.</p> <pre><code>                                Installed PtVenvs\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503   Name \u2503 Version \u2503 Path                                                       \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 ptbase \u2502  0.0.1  \u2502 ~/.pytoolbelt/environments/ptbase/0.0.1/venv               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"releases/","title":"Releases","text":""},{"location":"releases/#making-releases","title":"Making Releases","text":""},{"location":"releases/#what-is-a-release","title":"What is a release?","text":"<p>All releases are managed through the <code>pytoolbelt</code> tool. A <code>release</code> is a snapshot of your project at a specific point in time. This snapshot includes the code. A release can be made for either a <code>tool</code> or a <code>ptvenv</code>. It is best to envision your toolbelt repo as a mono repo for all tools and environments that you manage, therefore a release can be made for any of the tools or environments that you have in your toolbelt.</p>"},{"location":"releases/#creating-a-release","title":"Creating a Release","text":"<p>Let's say you have a tool called \"webcheck\" that simply pings a website and returns the status code. You have made some changes to the tool and you want to release it. To do this, you would follow the steps below:</p> <ol> <li>First, develop your tool until you are ready to release it.</li> <li>Commit your changes to the toolbelt repository, pushing all changes to the remote release branch configured in <code>pytoolbelt.yml</code>.</li> <li>Once you are ready to release your tool, bump the version number with the following command:</li> </ol> <pre><code>pytoolbelt tool bump --name webcheck  \n</code></pre> <p>This will bump the version number in the <code>config.yml</code> file of the tool. Obviously, you can also manually bump the version number in the <code>config.yml</code> file if you prefer.</p> <ol> <li>Commit all of your changes including your version bump and push them to the remote repository release branch.</li> <li>Alternatively you could make and merge a Pull Request to the configured release branch of the toolbelt repository.</li> <li>If you merged via PR, once your changes are in the release branch, pull the latest changes from the remote repository.</li> <li>Run the following command to create a release for the tool:</li> </ol> <pre><code>pytoolbelt release\n</code></pre>"},{"location":"tool/","title":"tools","text":""},{"location":"tool/#what-is-a-tool","title":"What is a tool?","text":"<p>A <code>tool</code> is a stripped down python project that contains only your python code, as well as a single configuration file that tells <code>pytoolbelt</code> how to manage the tool. <code>tools</code> have entrypoints, as well as a <code>ptvenv</code> that they require to run. This allows you to have multiple tools that share the same python environment, reducing the overhead of managing multiple virtual environments.</p>"},{"location":"tool/#creating-a-tool","title":"Creating a tool","text":"<p>To create a <code>tool</code> from the toolbelt directory of your project, simply run the following command. Remember, the name of your tool will be the name of the command itself, so choose wisely.</p> <pre><code>pytoolbelt tool new --name mytool\n</code></pre> <p>or globally, you can specify the toolbelt to use</p> <pre><code>pytoolbelt tool new --toolbelt my-toolbelt --name mytool\n</code></pre>"},{"location":"tool/#directory-structure","title":"Directory Structure","text":"<p>An example of what a <code>tool</code> directory structure looks like is as follows:</p> <pre><code>tools\n\u251c\u2500\u2500 mytool\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mytool\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __main__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 cli.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 config.yml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 README.md\n</code></pre> <p>It is possible to change this structure as needed, however this is a good starting point for most tools that have a few entrypoints and arguments.  If a simpler structure is needed, you can remove the <code>cli</code> directory and put all of your entrypoints in the <code>__main__.py</code> file and treat your tool as  a single file python script. It is however required to have the <code>config.yml</code> file in the root of the tool directory as well as the <code>__init__.py</code> file in the <code>mytool</code> directory.</p> <p>An example of what a simple tool layout looks like is as follows:</p> <pre><code>tools\n\u251c\u2500\u2500 mytool\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mytool\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __main__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 config.yml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"tool/#example-tool-config","title":"Example Tool Config","text":"<pre><code>tool:\n  name: mytool\n  version: \"0.0.1\"\n  ptvenv:\n    name: \"my_ptvenv\"\n    version: \"0.0.1\"\n</code></pre>"},{"location":"tool/#installing-a-tool","title":"Installing a tool","text":"<p>Tools can be installed globally from your toolbelt. To install a tool, the required <code>ptvenv</code> must be installed first. If it is not found, pytoolbelt will simply exit with an error message stating that the <code>ptvenv</code> is not found.</p>"},{"location":"tool/#from-a-released-tool","title":"From a released tool","text":"<p>If a specific version of a <code>tool</code> has been released in the repo, you can specify the version to install using the == syntax</p> <pre><code>pytoolbelt tool install --name mytool==1.22.3\n</code></pre> <p>or otherwise if you want to install the latest version of a <code>tool</code> you can simply run</p> <pre><code>pytoolbelt tool install --name mytool\n</code></pre> <p>These command however both require that a tool has been released in the toolbelt. If you just want to install the current version of what is in the tool directory, you can install the tool in development mode. </p>"},{"location":"tool/#install-in-development-mode","title":"Install in development mode","text":"<p>To install a tool in development mode, simply run the following command</p> <pre><code>pytoolbelt tool install --name mytool --dev-mode\n</code></pre> <p>This will install whatever is currently in the tool directory, as well as making the tool editable. This installation  is simply a symlink to the tool's entrypoint in the toolbelt. This behavior is similar to <code>pip install -e .</code> in a python project.</p>"},{"location":"toolbelt/","title":"Toolbelt","text":""},{"location":"toolbelt/#toolbelt","title":"Toolbelt","text":""},{"location":"toolbelt/#what-is-a-toolbelt","title":"What is a Toolbelt?","text":"<p>A toolbelt is simply a git repo with an opinionated directory structure that <code>pytoolbelt</code> uses to manage  the development and installation of tools from a central location. A <code>toolbelt</code> can be considered a mono-repo and has the following structure.</p> <pre><code>ptvenv           -- This is where your venv definitions live\ntools            -- This is where your tools live\n.gitignore       -- standard gitignore file\npytoolbelt.yml   -- The pytoolbelt configuration file for this toolbelt\nnoxfile.py       -- The nox configuration file for this toolbelt. Nox is testing is optional\npytest.ini       -- The pytest configuration file for this toolbelt. Pytest is optional. \n</code></pre>"},{"location":"toolbelt/#the-ptvenv-directory","title":"The ptvenv Directory","text":"<p>This directory contains all the venv definitions for your tools, referred to as a <code>ptvenv</code>. Each <code>ptvenv</code> is given a name, and a version as well as the python version required for it to work,  and the requirements that are needed for the venv.</p>"},{"location":"toolbelt/#the-tools-directory","title":"The tools Directory","text":"<p>This directory contains all the tools that are part of your toolbelt. Each tool is given a name, and a version as well as the ptvenv required for it to work.</p>"},{"location":"toolbelt/#the-pytoolbeltyml-file","title":"The pytoolbelt.yml File","text":"<p>This file contains the configuration for the toolbelt and has the following structure.</p> <pre><code>project-config:\n    python: \"3.10\"\n    bump: \"minor\"\n    envfile: \".env\"\n    release_branch: \"main\"\n    test_image: \"pytoolbelt/nox-test-runner:0.0.1\"\n</code></pre> <p>Each key in the <code>yml</code> file has the following meaning - <code>python (string)</code> The version of python used to create new <code>ptvenv</code>s. (must be quoted) - <code>bump (string)</code> The default bump level for the <code>bump</code> command. (must be quoted) - <code>envfile (string)</code> The path of the <code>.env</code> file that will be used to store environment variables. (must be quoted) - <code>release_branch (string)</code> The branch that will be used to create new releases. (must be quoted)' - <code>test_image (string)</code> The docker image that will be used to run tests. (must be quoted)</p>"},{"location":"toolbelt/#create-a-new-toolbelt","title":"Create a new Toolbelt","text":"<p>To create a new toolbelt, simply run the following command </p> <pre><code>pytoolbelt toolbelt new --url &lt;git-repo-url&gt;\n</code></pre> <p>Pytoolbelt needs to be linked to a remote git repo to manage the repo as a \"toolbelt\". The <code>--url</code> flag is required to link the toolbelt to the remote repo. It is advised to first create the remote repo in your github (or other git provider) account before running this command. It is however not required.</p> <p>This created a new toolbelt repo at the location <code>~/pytoolbelt/toolbelts/&lt;toolbelt-name&gt;</code>. A git repo was initiallized automatically at this location.</p>"},{"location":"toolbelt/#fetch-a-toolbelt","title":"Fetch a Toolbelt","text":"<p>To fetch a toolbelt first add the URL to the pytoolbelt config with the following command</p> <pre><code>pytoolbelt toolbelt add --url &lt;git-repo-url&gt;\n</code></pre> <p>Once the toolbelt has been added to the config, it can be fetch with the following command</p> <pre><code>pytoolbelt toolbelt fetch --name &lt;toolbelt-name&gt;\n</code></pre>"},{"location":"toolbelt/#display-configured-toolbelts","title":"Display Configured Toolbelts","text":"<p>To display the configured toolbelts, run the following command</p> <pre><code>pytoolbelt toolbelt show\n</code></pre>"},{"location":"toolbelt/#remove-a-toolbelt","title":"Remove a Toolbelt","text":"<p>To remove a toolbelt from the configuration, run the following command</p> <pre><code>pytoolbelt toolbelt remove --name &lt;toolbelt-name&gt;\n</code></pre> <p>The delete the repo from your machine</p> <pre><code>rm -rf ~/pytoolbelt/toolbelts/&lt;toolbelt-name&gt;\n</code></pre>"}]}